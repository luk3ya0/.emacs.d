Org Literate Programming

* Supported features

Org in my doom config can understand the following Org Mode features:

** Tables

using valign to align ascii and non-ascii in org table in a gui way, is enough for view,
but not while a company completion poping up.

| Foo              |    Bar |  Baz |
|------------------+--------+------|
| 中文        对齐 |  -1e24 | >3.5 |
| 123              |        |      |
| Lorem ipsum      | 30.000 |    1 |

** LaTeX fragments

Math in LaTeX markup is supported as both inline ($$ a^2 + b^2 $$) and block:

\begin{equation*}
\int_{\partial \Sigma} \mathbf{B} \cdot \mathrm{d}\boldsymbol{l} = \mu_0 \left(\iint_{\Sigma} \mathbf{J} \cdot \mathrm{d}\mathbf{S} + \varepsilon_0 \frac{\mathrm{d}}{\mathrm{d}t} \iint_{\Sigma} \mathbf{E} \cdot \mathrm{d}\mathbf{S} \right)
\end{equation*}

** Emphasis

- /italic/
- _underline_
- +strikethrough+
- ~code~
- =verbatim=
  
** Images

Images referenced by relative paths can be displayed when Orgro has the required
access permissions:

*** animate

#+caption: prelude
#+begin_src python :session manim_context
  from manim.scene.scene import Scene
  from manim.mobject.geometry import Circle, Square
  from manim.mobject.svg.tex_mobject import Tex

  from manim.animation.creation import Create, Write
  from manim.animation.fading import FadeOut
  from manim.animation.transform import Transform

  from manim.constants import PI
  from manim.utils.color import PINK

  from manim._config import config


  config.custom_folders = True
  config.save_as_gif = True
  config.background_color = "#0D1118"
  config.frame_rate = 30
  config.frame_size = 1080, 540
  config.video_dir = 'images'
  config.format = "gif"
#+end_src

#+RESULTS:

#+caption: later plot
#+begin_src python :session manim_context :results file
  config.output_file = "geo-demo.gif"

  class SquareToCircle(Scene):
      def construct(self):
	  circle = Circle()  # create a circle
	  circle.set_fill(PINK, opacity=0.5)  # set color and transparency

	  square = Square()  # create a square
	  square.rotate(PI / 4)  # rotate a certain amount

	  self.play(Create(square))  # animate the creation of the square
	  self.play(Transform(square, circle))  # interpolate the square into the circle
	  self.play(FadeOut(square))  # fade out animation

  scene = SquareToCircle()
  scene.render()  # That's it!

  fname = "images/geo-demo.gif"
  fname
#+end_src

#+RESULTS:
#+ATTR_ORG: :width 540
[[file:images/geo-demo.gif]]

#+begin_src python :session manim_context :results file
  config.output_file = "tex-demo.gif"

  class TexDemo(Scene):
      def construct(self):
	  typesOfText = Tex("""
	      This is a regular text,
	      $\\frac{x}{y}$,
	      $$x^2 + y^2 = a^2$$
	  """)
	  self.play(Write(typesOfText))
	  self.wait(3)


  scene = TexDemo()
  scene.render()  # That's it!

  fname = "images/tex-demo.gif"
  fname
#+end_src

#+RESULTS:
#+ATTR_ORG: :width 540
[[file:images/tex-demo.gif]]

*** plot

#+begin_src python :session :results file
import matplotlib.pyplot as plt
import numpy as np


with plt.style.context('dark_background'):
    x = np.linspace(0, 2, 100)

    # Note that even in the OO-style, we use `.pyplot.figure` to create the figure.
    fig, ax = plt.subplots()  # Create a figure and an axes.
    ax.plot(x, x, label='linear')  # Plot some data on the axes.
    ax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...
    ax.plot(x, x**3, label='cubic')  # ... and some more.
    ax.set_xlabel('x label')  # Add an x-label to the axes.
    ax.set_ylabel('y label')  # Add a y-label to the axes.
    ax.set_title("Simple Plot")  # Add a title to the axes.
    ax.legend()  # Add a legend.

fname = 'images/matplot.png'
plt.savefig(fname)

fname
#+end_src

#+RESULTS:
#+ATTR_ORG: :width 540
[[file:images/matplot.png]]

** TODO Inbox [2/3]
- [X] eggs
- [ ] milk
- [X] corn

;; :NOTE: SVG tag is a minor mode that displays a rounded box with outer
;; and inner padding and a controllable box radius. The resulting SVG is
;; perfectly aligned with regular text such that a  `TAG` can be inserted
;; and edited anywhere in the text.
;;
;; :TODO: Migrate to ELPA or MELPA
;;
;; More examples:
;; --------------
;;
;;  Save .................. `C-x` `C-s`   Help ............... `C-h`
;;  Save as ............... `C-x` `C-w`   Cancel ............. `C-g`
;;  Open a new file ....... `C-x` `C-f`   Undo ............... `C-z`
;;  Open recent ........... `C-x` `C-r`   Close buffer ....... `C-x` `k`
;;  Browse directory ...... `C-x` `d`     Quit ............... `C-x` `C-c`
;; 
;; ------------------------------------------------------------------------
;; (1) (2) (3) (4) (5) (Z) (W) (12) (99)
;; ------------------------------------------------------------------------

